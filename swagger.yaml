openapi: 3.0.0
info:
  version: 1.0.0
  title: "My Blog API"
  description: "This is the first professional api project we creating. This is a simple blog api application where anyone can create a new account, login to their system and create articles that will be visible publicly"
  contact:
    name: Mehedi Hasan
    email: 126mehedi@gmail.com
    url: example.com
servers:
  # Added by API Auto Mocking Plugin
  - description: Development
    url: http://localhost:4000/api/v1
tags:
  - name: Auth
    description: Authentication Endpoints (public)
  - name: Article
    description: Article Endpoints (public + privet)
  - name: Comment
    description: Comment endpoints (Privet)
  - name: User
    description: User Endpoints (Admin only)

paths:
  "/auth/signup":
    post:
      description: This api endpoint will create a new account
      tags: [Auth]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Mehedi Hasan
                email:
                  type: string
                  format: email
                  example: mehedi@gmail.com
                password:
                  type: string
                  format: password
                  example: example1234
              required: [name, email, password]
      responses:
        "201":
          description: Sing up successful
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Singup successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5
                  links:
                    type: object
                    properties:
                      selt:
                        type: string
                        example: "/auth/signup"
                      singIn:
                        type: string
                        example: "/auth/singin"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/auth/signin":
    post:
      description: Login To Your Account
      tags: [Auth]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: mehedi@gmail.com
                password:
                  type: string
                  format: password
                  example: example1234
              required: [email, password]
      responses:
        "200":
          description: Login successful
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Singin successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5
                  links:
                    type: object
                    properties:
                      selt:
                        type: string
                        example: "/auth/signin"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/articles":
    get:
      tags: [Article]
      description: Retrive all published articles
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/sortTypeParam"
        - $ref: "#/components/parameters/sortByParam"
        - $ref: "#/components/parameters/searchParam"
      responses:
        "200":
          description: Return a list of articles
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            title:
                              type: string
                              example: title
                            cover:
                              type: string
                              format: url
                              example: https://s3.aws.com/myfirstblog/123.jpg
                            author:
                              $ref: "#/components/schemas/AuthorDTO"
                            link:
                              type: string
                              format: url
                              example: "/articles/1"

                          required: [id, title, author]
                        - $ref: "#/components/schemas/Timestamp"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/articles?page=2&limit=10"

                      next:
                        type: string
                        format: url
                        example: "/articles?page=3&limit=10"

                      prev:
                        type: string
                        format: url
                        example: "/articles?page=1&limit=10"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
    post:
      operationId: createPost
      security:
        - bearerAuth: []
      tags: [Article]
      description: This endpoints will create a new Article
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: article title
                body:
                  type: string
                  format: text
                  example: article body
                cover:
                  type: string
                  format: url
                  example: "https://s3.aws.com/myfirstblog/123.jpg"
                status:
                  type: string
                  enum: [draft, publishd]
                  example: draft
              required: [title, body]
      responses:
        "201":
          description: Successfully created a new article
          content:
            "application/json":
              schema:
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Article created successfully
                  data:
                    $ref: "#/components/schemas/Article"
                  links:
                    type: object
                    properties:
                      selt:
                        type: string
                        format: url
                        example: "/articles/1"
                      author:
                        type: string
                        format: url
                        example: "/articles/1/author"
                      comments:
                        type: string
                        format: url
                        example: "/articles/1/comments"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
  "/articles/{id}":
    get:
      description: Fatch a single article
      tags: [Article]
      parameters:
        - $ref: "#/components/parameters/idPathParam"
        - in: query
          name: expend
          description: Expand author and comment object
          required: false
          schema:
            type: string
            example: "author,comment"
      responses:
        "200":
          description: "Successfully get a single Article"
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Article"
                      - type: object
                        properties:
                          author:
                            $ref: "#/components/schemas/AuthorDTO"
                      - type: object
                        properties:
                          comments:
                            type: array
                            items:
                              $ref: "#/components/schemas/Comment"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/articles/1"
                      author:
                        type: string
                        format: url
                        example: "articles/1/author"
                      comments:
                        type: string
                        format: url
                        example: "/articles/1/comments"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    put:
      security:
        - bearerAuth: []
      description: Create or update entire article
      tags: [Article]
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int32
                  example: 1
                title:
                  type: string
                  example: Article Title
                body:
                  type: string
                  format: text
                  example: Article Body
                cover:
                  type: string
                  format: url
                  example: https://s3.aws.com/myblogapi/123.jpg
                status:
                  type: string
                  enum: [draft, published]
                  example: draft
              required: [id, title, body, cover, status]
      responses:
        "200":
          description: "Successfully Updated"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ArticleUpdateDTO"
        "201":
          description: "Successfully Created"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ArticleCreateDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    patch:
      security:
        - bearerAuth: []
      description: Partially update an article
      tags: [Article]
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Article Title
                body:
                  type: string
                  format: text
                  example: Article Body
                cover:
                  type: string
                  format: url
                  example: https://s3.aws.com/myblogapi/123.jpg
                status:
                  type: string
                  enum: [draft, published]
                  example: draft
      responses:
        "200":
          description: "Successfully Updated"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ArticleUpdateDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      security:
        - bearerAuth: []
      tags: [Article]
      description: Delete an Article by ID
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: "Article delete successfully"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

#All Component are  here
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [createdAt, updatedAt]
    AuthorDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: author name
      required: [id, name]
    Pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: string
          format: url
          example: 3
        prev:
          type: string
          format: url
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
      required:
        - page
        - limit
        - totalPage
        - totalItems
    Article:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            authorId:
              type: integer
              format: int32
              example: 1
            title:
              type: string
              example: article title
            body:
              type: string
              format: text
              example: The body ot the article.
            cover:
              type: string
              format: url
              example: https://s3.aws.com/myfirstblog/123.jpg
            status:
              type: string
              enum: [draft, published]
              example: draft
          required: [id, title, authorId, body, status]

        - $ref: "#/components/schemas/Timestamp"
    ArticleCreateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: "Article Create Successfully"
        data:
          $ref: "#/components/schemas/Article"
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: "/articles/1"
            author:
              type: string
              format: url
              example: "/articles/1/authore"
            comments:
              type: string
              format: url
              example: "/articles/1/comments"
    ArticleUpdateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Article updated successfully
        data:
          $ref: "#/components/schemas/Article"
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: "/articles/1"

    Comment:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            authorId:
              type: integer
              format: int32
              example: 1
            articleId:
              type: integer
              format: int32
              example: 1
            body:
              type: string
              format: text
              example: The body ot the comment
            status:
              type: string
              enum: [public, privet]
              example: public
          required: [id, title, authorId, articleId body, status]
        - $ref: "#/components/schemas/Timestamp"

  responses:
    "500":
      description: "Internal Server Error"
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: Internal Server Errort
              message:
                type: string
                example: We are sorry fot the inconvenience. Please try again leter!
    "400":
      description: "Bad Request"
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: Bad Request
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email
                    in:
                      type: string
                      enum: [query, body]
                      example: body
    "401":
      description: Unauthorized
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You don't have the right permissions
    "404":
      description: Resources Not Found!
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Requested resource not found

  parameters:
    pageParam:
      in: query
      name: page
      description: current page number
      schema:
        type: integer
        format: int32
        example: 2
    limitParam:
      in: query
      name: limit
      description: maximum items to be returend
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      in: query
      name: sort_type
      description: the type of sort (ase or dsc)
      schema:
        type: string
        enum: [ase, dsc]
        example: dsc
    sortByParam:
      in: query
      name: sort_by
      description: Sort Key
      schema:
        type: string
        example: updatedAt
    searchParam:
      in: query
      name: search
      description: search terms
      schema:
        type: string
        example: title
    idPathParam:
      in: path
      name: id
      required: true
      description: Article ID
      schema:
        type: string
        example: '667d2956438bfb5c95e521a9'
